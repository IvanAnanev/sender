# dcape elixir  Makefile

SHELL               = /bin/bash
CFG                ?= .env

# Run recreate on deploy
APP_BUILD          ?= yes

# Проект собирается в sender
PROJECT            ?= sender

# имя сайта для контейнера
APP_SITE           ?= sender.dev.lan

#Пользователь для сборки
APP_USER_BUILD     ?= op
APP_GRP_BUILD      ?= docker

#Пользователь для запуска
APP_USER_RUN       ?= root

# команда сборки
CMD                ?= /home/app/build-app.sh

# Docker-compose project name (container name prefix)
PROJECT_NAME       ?= $(PROJECT)
# dcape containers name prefix
DCAPE_PROJECT_NAME ?= dcape
# dcape network attach to
DCAPE_NET          ?= $(DCAPE_PROJECT_NAME)_default
# Название директории для хранения dets
DETS_PATH          ?= $(PROJECT)_dets
# Пароль и логин для администрирования шаблонами
ADMIN_NAME				 ?= su123
ADMIN_PASSWORD		 ?= $(shell < /dev/urandom tr -dc A-Za-z0-9 | head -c14; echo)

# elixir docker image
ELIXIR_IMAGE       ?= tenderpro/elixir:0.2

# Таймаут ожидания выключения контейнера, перед тем как убить контейнер
SHUTDOWN_TIMEOUT   ?=30000

# ------------------------------------------------------------------------------
# config template

define CONFIG_DEF
# project config file, generated by make $(CFG)
APP_SITE=$(APP_SITE)
# Run recreate on deploy
APP_BUILD=$(APP_BUILD)
#Пользователь для запуска
APP_USER_RUN=$(APP_USER_RUN)

PROJECT=$(PROJECT)

# Docker-compose project name (container name prefix)
PROJECT_NAME=$(PROJECT_NAME)
# dcape network attach to
DCAPE_NET=$(DCAPE_NET)
# Название директории для хранения dets
DETS_PATH=$(DETS_PATH)
# Пароль и логин для администрирования шаблонами
ADMIN_NAME=$(ADMIN_NAME)
ADMIN_PASSWORD=$(ADMIN_PASSWORD)

# elixir docker image
ELIXIR_IMAGE=$(ELIXIR_IMAGE)

SHUTDOWN_TIMEOUT=$(SHUTDOWN_TIMEOUT)
endef
export CONFIG_DEF

# ------------------------------------------------------------------------------

# if exists - load old values
-include $(CFG).bak
export

-include $(CFG)
export

.PHONY: all $(CFG) setup start start-hook stop update up reup down build build-proj build-update dc help

all: help

## настройка контейнера
setup: $(CFG)

# ------------------------------------------------------------------------------
# webhook commands

start: $(CFG) build reup

start-hook: $(CFG) build reup

stop: down

update: build reup
# ------------------------------------------------------------------------------
# docker commands

## старт контейнеров
up:
up: CMD=up -d
up: dc

## рестарт контейнеров
reup:
reup: CMD=up --force-recreate -d --timeout $(SHUTDOWN_TIMEOUT)
reup: dc

## остановка и удаление всех контейнеров
down:
down: CMD=stop --timeout $(SHUTDOWN_TIMEOUT)
down: dc
down: CMD=rm -f
down: dc2

# ------------------------------------------------------------------------------
# Elixir

## сборка проекта
build: build-proj

## повторная сборка проекта
build-update: CMD=gosu $(APP_USER_BUILD) mix do local.hex --force, local.rebar --force, deps.get, compile
build-update: build-proj

build-proj:
	@echo "*** $@ ***"
	@[[ $$APP_BUILD == "yes" ]] && docker run --rm  \
	  -v /etc/timezone:/etc/timezone:ro \
	  -v /etc/localtime:/etc/localtime:ro \
		-v /opt/dcape/var/data/cis/hook:/hook:ro \
	  -v $$PWD:/home/app \
	  -w /home/app \
	  --env=MIX_ENV=prod \
	  --env=PROJECT=$(PROJECT) \
	  --env=APPUSER=$(APP_USER_BUILD) \
	  --env=APPGRP=$(APP_GRP_BUILD) \
	  $(ELIXIR_IMAGE) \
	  $(CMD) || echo "APP_BUILD is $$APP_BUILD (need 'yes')"

# ------------------------------------------------------------------------------

# $$PWD используется для того, чтобы текущий каталог был доступен в контейнере по тому же пути
# и относительные тома новых контейнеров могли его использовать
## run docker-compose
dc dc2: docker-compose.yml
	@docker run --rm  \
	  -v /var/run/docker.sock:/var/run/docker.sock \
	  -v $$PWD:$$PWD \
	  -w $$PWD \
	  docker/compose:1.14.0 \
	  -p $(PROJECT_NAME) \
	  $(CMD)

# ------------------------------------------------------------------------------

$(CFG):
	@[ -f $@ ] || { echo "$$CONFIG_DEF" > $@ ; echo "Warning: Created default $@" ; }

# ------------------------------------------------------------------------------

## List Makefile targets
help:
	@grep -A 1 "^##" Makefile | less

##
## Press 'q' for exit
##
